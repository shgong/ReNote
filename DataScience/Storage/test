package training;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.MultipleInputs;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;


public class Facebook {

    public static class DateMapper extends
            Mapper<Object, Text, Text, Text> {
        public void map(Object key, Text value, Context context)
                throws IOException, InterruptedException {

            String record = value.toString();
            String[] parts = record.split(",");
            context.write(new Text(parts[0]), new Text("date\t" + parts[1]));
            //User,date,post
        }
    }

    public static class StateMapper extends
            Mapper<Object, Text, Text, Text> {
        public void map(Object key, Text value, Context context)
                throws IOException, InterruptedException {
            String record = value.toString();
            String[] parts = record.split(",");
            context.write(new Text(parts[0]), new Text(parts[1]));
            //User,state
        }
    }

    public static class ResultMapper extends
    Mapper<Object, Text, Text, Text> {
        public void map(Object key, Text value, Context context)
        throws IOException, InterruptedException {
            String record = value.toString();
            String[] parts = record.split("\t");
            context.write(new Text(parts[0]), new Text("state\t" + parts[1]));
            //User,state
        }
    }


    public static class UserReducer extends Reducer<Text, Text, Text, Text> {
        public void reduce(Text key, Iterable<Text> values, Context context)
                throws IOException, InterruptedException {

            String state = "";
            int count = 0;
            for (Text t : values) {
                String parts[] = t.toString().split("\t");
                if (parts[0].equals("date")) {
                    count++;
                } else if (parts[0].equals("state")) {
                    state = parts[1];
                }
            }


            String str =  String.format("%s\t%d", state, count);
            context.write(new Text(key.toString()), new Text(str));
        }
    }


    public static class ResultReducer extends Reducer<Text, Text, Text, Text> {
        public void reduce(Text key, Iterable<Text> values, Context context)
                throws IOException, InterruptedException {

            String name = "";
            int count = 0;
            for (Text t : values) {
                String parts[] = t.toString().split("\t");
                if (parts[0].equals("date")) {
                    count++;
                } else if (parts[0].equals("state")) {
                    name = parts[1];
                }
            }

            String str =  String.format("%d,%s", count, name);
            context.write(new Text(key.toString()), new Text(str));

        }
    }




    public static void main(String[] args) throws Exception {

        Configuration conf = new Configuration();
        Job job1 = Job.getInstance(conf, "UserJoin");
        job1.setJarByClass(Facebook.class);
        job1.setReducerClass(UserReducer.class);

        job1.setOutputKeyClass(Text.class);
        job1.setOutputValueClass(Text.class);
        MultipleInputs.addInputPath(job1, new Path(args[0]),TextInputFormat.class, DateMapper.class);
        MultipleInputs.addInputPath(job1, new Path(args[1]),TextInputFormat.class, StateMapper.class);

        Path outputPath = new Path(args[2]);
        FileOutputFormat.setOutputPath(job1, outputPath);
        outputPath.getFileSystem(conf).delete(outputPath);

        job1.waitForCompletion(true);

        Configuration conf2=new Configuration();
        Job job2=Job.getInstance(conf2);
        job2.setJarByClass(Facebook.class);
        job2.setMapperClass(ResultMapper.class);
        job2.setReducerClass(ResultReducer.class);

        job2.setOutputKeyClass(Text.class);
        job2.setOutputValueClass(Text.class);

        Path outputPath1=new Path(args[3]);
        FileInputFormat.addInputPath(job2, outputPath);
        FileOutputFormat.setOutputPath(job2, outputPath1);
        outputPath1.getFileSystem(conf2).delete(outputPath1, true);

        System.exit(job2.waitForCompletion(true)?0:1);

    }
}
